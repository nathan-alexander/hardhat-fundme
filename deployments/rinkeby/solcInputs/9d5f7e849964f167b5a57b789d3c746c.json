{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//Pragma\npragma solidity ^0.8.8;\n//Imports\n//Import the PriceConverter library\nimport \"./PriceConverter.sol\";\n//Error codes\n//There are now defined errors in Solidity that require less gas.\nerror FundMe__NotOwner();\n\n//This contract will be used to get funds from users, withdraw funds, set a minimum funding value in USD\n/** @title A contract for crowdfunding\n *   @author Nathan Alexander\n *   @notice This contract is to demo a sample funding contract\n *   @dev This implements price feeds as our library\n */\ncontract FundMe {\n    //Type Declarations\n\n    //This is how we use the library as extensions - any library method that returns uint256 can be used as a method on uint256\n    using PriceConverter for uint256;\n    //State Variables\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToContribution;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    modifier onlyOwner() {\n        //require(msg.sender == i_owner, \"Sender is not owner.\");\n\n        //Better way than require because it says gas.\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    //The payable modifier lets the compiler know that value can be sent to this function. The balance is stored in the contract's address.\n    /**\n     *   @notice This function allows function callers to fund the contract\n     *   @dev Funders will be added to the map and the funders array\n     */\n    function fund() public payable {\n        //Want to be able to set a minimum fund amount in USD\n\n        //msg.value gets the amount of value sent in the transaction\n        //The require method is a checker, it will make sure that msg.value is at least 50 USD or revert\n        //msg.value is uint256 so we can call getConversionRate on it implicity, we don't need to pass in the parameter - it is inferred.\n        //If you have additional parameters, they must be passed in.\n        require(\n            msg.value.getConversationRate(priceFeed) >= MINIMUM_USD,\n            \"Minimum not met.\"\n        );\n        funders.push(msg.sender);\n        addressToContribution[msg.sender] = msg.value;\n        //Reverting: All computation that fails gets the value returned to the user. All prior work will still cost gas but be undone.\n    }\n\n    function showContribution(address _address) public view returns (uint256) {\n        return addressToContribution[_address];\n    }\n\n    function withdraw() public onlyOwner {\n        //for loops in Solidity take three arguments: starting index, ending index, and step amount.\n        //We define a variable and set it to 0 for the starting index\n        //We set the ending condition, the funderIndex variable can't be larger than the funders array\n        //We increment fundersIndex\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToContribution[funder] = 0;\n        }\n        //reset the array\n        //This sets funders to a new array with no elements in it - this is what the (0) means.\n        funders = new address[](0);\n        //withdraw funds\n\n        //msg.sender = address\n        //payable(msg.sender) = payable address\n\n        //As of right now call is the best way to send funds from a contract.\n        //We say (bool callSuccess, ) because call returns two values, but we only want to use callSuccess so we disregard the other\n        //To use call as a payment, we have to include the value in the call, which is set to address(this).balance;\n        //\"this\" always refers to the current contract, so we are saying get the balance of this contract's address.\n        //the (\"\") is necessary because call is a base level function and can call other functions, but we don't want it to - so we leave it blank with empty string.\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        //We are going to use the callSuccess bool to make sure the transaction went thru. This is so we can revert and not waste funds if it fails.\n        require(callSuccess, \"Call failed\");\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n//We can import directly from GitHub to get the price aggregator interface - this also gives us the ABI.\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//Libraries are similar to contracts\n//Library methods must have the internal view modifier on them\n//They can be called in the main contract on the type that they return, in this code its uint256.\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        //The aggregator's latestRoundData() function returns several different variables, however we are only interested in price.\n        //You can add a comma in place of the variables you don't wish to store.\n        //(uint80 roundID, int price, uint startedAt, uint timeStamp, uint80 answeredInRound) becomes (,int price,,,)\n        //We can explicity say int256 in place of int because int defaults to int256\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n\n        //We are typecasing int256 price to uint256 because this is a large number\n        return uint256(price * 1e10); // 1**10\n    }\n\n    function getConversationRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed); //Get the price of eth in USD\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18; //Returns in amount specified in USD\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}